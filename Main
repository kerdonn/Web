import sys
import time
from playwright.sync_api import sync_playwright
from bs4 import BeautifulSoup
import random
import pygame

# Function to fetch job listings from CV Keskus based on city and category
def get_jobs_from_cvkeskus(city, category=None):
    city_lower = city.strip().lower()  # Normalize city input
    category_lower = category.strip().lower() if category else ""  # Normalize category input

    # Construct URL based on city and category
    if city_lower == "tartu" and category_lower == "it":
        url = "https://www.cvkeskus.ee/toopakkumised?op=search&search%5Bjob_salary%5D=3&ga_track=results&search%5Blocations%5D%5B%5D=4&search%5Bcategories%5D%5B%5D=8"
    else:
        city_formatted = city_lower.replace(" ", "+")
        url = f"https://www.cvkeskus.ee/otsi?search%5Btext%5D=&search%5Bcity%5D={city_formatted}"

    try:
        # Use Playwright to scrape the webpage
        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)  # Launch browser in headless mode
            page = browser.new_page()
            page.goto(url)

            # Wait for job listings to load
            try:
                page.wait_for_selector('.job-offer', timeout=15000)
            except:
                print("Tööpakkumised ei leitud. Üritan uuesti olen tubli poiss onju...")
                time.sleep(5)
                page.reload()
                try:
                    page.wait_for_selector('.job-offer', timeout=15000)
                except:
                    print("Tööpakkumised ei ilmunud lege kodutu oled tulevikus.")
                    return None

            html = page.content()  # Get page content
            browser.close()
            return html

    except Exception as e:
        print(f"Keerasin persse noh: {str(e)}")
        return None

# Function to parse job listings from the HTML content
def parse_jobs_from_cvkeskus(html):
    soup = BeautifulSoup(html, 'html.parser')  # Parse HTML with BeautifulSoup
    jobs = soup.find_all('div', class_='job-offer')  # Find all job offer elements

    parsed = []
    for job in jobs:
        title = job.select_one('.job-title')  # Extract job title
        company = job.select_one('.employer')  # Extract company name
        location = job.select_one('.job-location')  # Extract job location

        if title and company:
            parsed.append({
                'title': title.get_text(strip=True),
                'company': company.get_text(strip=True),
                'location': location.get_text(strip=True) if location else '',
                'link': job.find('a')['href']  # Extract job link
            })
    return parsed

# Function to save job listings as an HTML file
def save_as_html(jobs, city):
    filename = f"toopakkumised_{city.lower()}.html"  # Generate filename based on city
    with open(filename, "w", encoding="utf-8") as f:
        f.write("<html><head><meta charset='UTF-8'><title>Tööpakkumised</title></head><body><ul>")
        for job in jobs:
            f.write(f"<li><a href='{job['link']}'>{job['title']}</a> – {job['company']} ({job['location']})</li>")
        f.write("</ul></body></html>")
    print(f"Tööpakkumised salvestatud faili: {filename}")

# Memory game settings
FPS = 30  # Frames per second
WINDOWWIDTH = 640  # Window width
WINDOWHEIGHT = 480  # Window height
REVEALSPEED = 8  # Speed of box reveal animation
BOXSIZE = 40  # Size of each box
GAPSIZE = 10  # Gap between boxes
BOARDWIDTH = 10  # Number of boxes horizontally
BOARDHEIGHT = 7  # Number of boxes vertically
assert (BOARDWIDTH * BOARDHEIGHT) % 2 == 0, 'Board must have an even number of boxes for pairs of matches.'
XMARGIN = int((WINDOWWIDTH - (BOARDWIDTH * (BOXSIZE + GAPSIZE))) / 2)  # Horizontal margin
YMARGIN = int((WINDOWHEIGHT - (BOARDHEIGHT * (BOXSIZE + GAPSIZE))) / 2)  # Vertical margin

# Colors
GRAY = (100, 100, 100)
NAVYBLUE = (60, 60, 100)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 102, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 128, 0)
PURPLE = (255, 0, 255)
CYAN = (0, 255, 255)

BGCOLOR = GREEN  # Background color
LIGHTBGCOLOR = GRAY  # Light background color
BOXCOLOR = WHITE  # Box color
HIGHLIGHTCOLOR = BLUE  # Highlight color

# Shapes
DONUT = 'donut'
SQUARE = 'square'
DIAMOND = 'diamond'
LINES = 'lines'
OVAL = 'oval'

# All colors and shapes
ALLCOLORS = (RED, GREEN, BLUE, YELLOW, ORANGE, PURPLE, CYAN)
ALLSHAPES = (DONUT, SQUARE, DIAMOND, LINES, OVAL)

assert len(ALLCOLORS) * len(ALLSHAPES) * 2 >= BOARDWIDTH * BOARDHEIGHT

# Main function for the memory game
def main():
    global FPSCLOCK, DISPLAYSURF
    pygame.init()  # Initialize pygame
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))  # Set up display

    mousex = 0  # X-coordinate of mouse
    mousey = 0  # Y-coordinate of mouse
    pygame.display.set_caption('Memory Game')  # Set window title

    mainBoard = getRandomizedBoard()  # Generate randomized board
    revealedBoxes = generateRevealedBoxesData(False)  # Initialize revealed boxes
    firstSelection = None  # Track first selection

    DISPLAYSURF.fill(BGCOLOR)  # Fill background
    startGameAnimation(mainBoard)  # Start game animation

    while True:
        mouseClicked = False
        DISPLAYSURF.fill(BGCOLOR)  # Fill background
        drawBoard(mainBoard, revealedBoxes)  # Draw the board

        for event in pygame.event.get():  # Handle events
            if event.type == pygame.QUIT or (event.type == pygame.KEYUP and event.key == pygame.K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEMOTION:
                mousex, mousey = event.pos  # Update mouse position
            elif event.type == pygame.MOUSEBUTTONUP:
                mousex, mousey = event.pos
                mouseClicked = True

        boxx, boxy = getBoxAtPixel(mousex, mousey)  # Get box at mouse position
        if boxx != None and boxy != None:
            if not revealedBoxes[boxx][boxy]:
                drawHighlightBox(boxx, boxy)  # Highlight box
            if not revealedBoxes[boxx][boxy] and mouseClicked:
                revealBoxesAnimation(mainBoard, [(boxx, boxy)])  # Reveal box animation
                revealedBoxes[boxx][boxy] = True
                if firstSelection == None:
                    firstSelection = (boxx, boxy)  # Store first selection
                else:
                    # Check if the two selected boxes match
                    icon1shape, icon1color = getShapeAndColor(mainBoard, firstSelection[0], firstSelection[1])
                    icon2shape, icon2color = getShapeAndColor(mainBoard, boxx, boxy)

                    if icon1shape != icon2shape or icon1color != icon2color:
                        pygame.time.wait(1000)  # Pause before hiding boxes
                        coverBoxesAnimation(mainBoard, [(firstSelection[0], firstSelection[1]), (boxx, boxy)])
                        revealedBoxes[firstSelection[0]][firstSelection[1]] = False
                        revealedBoxes[boxx][boxy] = False
                    elif hasWon(revealedBoxes):  # Check if the player has won
                        gameWonAnimation(mainBoard)
                        pygame.time.wait(2000)
                        mainBoard = getRandomizedBoard()  # Reset board
                        revealedBoxes = generateRevealedBoxesData(False)
                        drawBoard(mainBoard, revealedBoxes)
                        pygame.display.update()
                        pygame.time.wait(1000)
                        startGameAnimation(mainBoard)
                    firstSelection = None

        pygame.display.update()
        FPSCLOCK.tick(FPS)  # Control game speed

# Generate data for revealed boxes
def generateRevealedBoxesData(val):
    revealedBoxes = []
    for i in range(BOARDWIDTH):
        revealedBoxes.append([val] * BOARDHEIGHT)
    return revealedBoxes

# Generate a randomized board with pairs of icons
def getRandomizedBoard():
    icons = []
    for color in ALLCOLORS:
        for shape in ALLSHAPES:
            icons.append((shape, color))

    random.shuffle(icons)  # Shuffle icons
    numIconsUsed = int(BOARDWIDTH * BOARDHEIGHT / 2)  # Number of pairs needed
    icons = icons[:numIconsUsed] * 2  # Duplicate icons for pairs
    random.shuffle(icons)  # Shuffle again

    board = []
    for x in range(BOARDWIDTH):
        column = []
        for y in range(BOARDHEIGHT):
            column.append(icons[0])
            del icons[0]
        board.append(column)
    return board

# Placeholder for start game animation
def startGameAnimation(board):
    pass

# Draw the game board
def drawBoard(board, revealed):
    for boxx in range(BOARDWIDTH):
        for boxy in range(BOARDHEIGHT):
            left, top = leftTopCoordsOfBox(boxx, boxy)
            if not revealed[boxx][boxy]:
                pygame.draw.rect(DISPLAYSURF, BOXCOLOR, (left, top, BOXSIZE, BOXSIZE))
            else:
                shape, color = getShapeAndColor(board, boxx, boxy)
                drawIcon(shape, color, boxx, boxy)

# Draw an icon on the board
def drawIcon(shape, color, boxx, boxy):
    quarter = int(BOXSIZE * 0.25)
    half = int(BOXSIZE * 0.5)
    left, top = leftTopCoordsOfBox(boxx, boxy)
    if shape == DONUT:
        pygame.draw.circle(DISPLAYSURF, color, (left + half, top + half), half - 5)
        pygame.draw.circle(DISPLAYSURF, BGCOLOR, (left + half, top + half), quarter - 5)
    elif shape == SQUARE:
        pygame.draw.rect(DISPLAYSURF, color, (left + quarter, top + quarter, BOXSIZE - half, BOXSIZE - half))
    elif shape == DIAMOND:
        pygame.draw.polygon(DISPLAYSURF, color, ((left + half, top), (left + BOXSIZE - 1, top + half), (left + half, top + BOXSIZE - 1), (left, top + half)))
    elif shape == LINES:
        for i in range(0, BOXSIZE, 4):
            pygame.draw.line(DISPLAYSURF, color, (left, top + i), (left + i, top))
            pygame.draw.line(DISPLAYSURF, color, (left + i, top + BOXSIZE - 1), (left + BOXSIZE - 1, top + i))
    elif shape == OVAL:
        pygame.draw.ellipse(DISPLAYSURF, color, (left, top + quarter, BOXSIZE, half))

# Get the top-left coordinates of a box
def leftTopCoordsOfBox(boxx, boxy):
    left = boxx * (BOXSIZE + GAPSIZE) + XMARGIN
    top = boxy * (BOXSIZE + GAPSIZE) + YMARGIN
    return (left, top)

# Get the box at a specific pixel position
def getBoxAtPixel(x, y):
    for boxx in range(BOARDWIDTH):
        for boxy in range(BOARDHEIGHT):
            left, top = leftTopCoordsOfBox(boxx, boxy)
            boxRect = pygame.Rect(left, top, BOXSIZE, BOXSIZE)
            if boxRect.collidepoint(x, y):
                return (boxx, boxy)
    return (None, None)

# Highlight a box
def drawHighlightBox(boxx, boxy):
    left, top = leftTopCoordsOfBox(boxx, boxy)
    pygame.draw.rect(DISPLAYSURF, HIGHLIGHTCOLOR, (left - 5, top - 5, BOXSIZE + 10, BOXSIZE + 10), 4)

# Reveal boxes animation
def revealBoxesAnimation(board, boxes):
    for box in boxes:
        drawBoard(board, generateRevealedBoxesData(True))
        pygame.display.update()
        pygame.time.wait(REVEALSPEED)
        drawBoard(board, generateRevealedBoxesData(False))

# Get the shape and color of a box
def getShapeAndColor(board, boxx, boxy):
    shape, color = board[boxx][boxy]
    return shape, color

# Cover boxes animation
def coverBoxesAnimation(board, boxes):
    for box in boxes:
        drawBoard(board, generateRevealedBoxesData(False))
        pygame.display.update()
        pygame.time.wait(REVEALSPEED)

# Check if the player has won
def hasWon(revealedBoxes):
    for row in revealedBoxes:
        if False in row:
            return False
    return True

# Placeholder for game won animation
def gameWonAnimation(board):
    pass

# Function to start the memory game as a backup
def käivita_mälumäng():
    print("Tööpakkumised ei leitud. Backup Activated.")
    main()

# Main program logic
if __name__ == "__main__":
    # Ask the user for city and category
    city = input("Sisesta oma linn: ")
    category = input("Sisesta oma valdkond (nt IT): ")

    jobs_html = get_jobs_from_cvkeskus(city, category)  # Fetch job listings

    if jobs_html is None:
        käivita_mälumäng()  # Start memory game if no jobs found
    else:
        jobs = parse_jobs_from_cvkeskus(jobs_html)  # Parse job listings
        if jobs:
            save_as_html(jobs, city)  # Save jobs to HTML file
        else:
            print("Tööpakkumisi ei leitud. Backup Activated.")
            käivita_mälumäng()  # Start memory game if no jobs found
